#pragma once

class BracedStatement;
class ClassDeclaration;
class ClassDeclarationRepeated;
class CommaExpression;
class CommaExpressionRepeated;
class CommaTypeIdentifier;
class CommaTypeIdentifierRepeated;
class ExpressionAtExpression;
class ExpressionBang;
class ExpressionBinaryOperatorExpression;
class ExpressionCommaExpressionRepeated;
class ExpressionCommaExpressionRepeatedOptional;
class ExpressionFalse;
class Expression;
class ExpressionIdentifierExpressionCommaExpressionRepeatedOptional;
class ExpressionLength;
class ExpressionNewExpression;
class ExpressionNewIdentifier;
class ExpressionNumber;
class ExpressionParentheses;
class ExpressionThis;
class ExpressionTrue;
class ExtendsIdentifierOptional;
class Goal;
class Identifier;
class MainClass;
class MethodDeclaration;
class MethodDeclarationRepeated;
class Number;
class StatementAssignmentArray;
class StatementAssignment;
class Statement;
class StatementIfElse;
class StatementPrint;
class StatementRepeated;
class StatementWhile;
class TypeBoolean;
class Type;
class TypeIdentifierCommaTypeIdentifierRepeated;
class TypeIdentifierCommaTypeIdentifierRepeatedOptional;
class TypeIdentifier;
class TypeIntArray;
class TypeInt;
class VarDeclaration;
class VarDeclarationRepeated;

class Visitor {
public:
    virtual void Visit(BracedStatement*) = 0;
    virtual void Visit(ClassDeclaration*) = 0;
    virtual void Visit(ClassDeclarationRepeated*) = 0;
    virtual void Visit(CommaExpression*) = 0;
    virtual void Visit(CommaExpressionRepeated*) = 0;
    virtual void Visit(CommaTypeIdentifier*) = 0;
    virtual void Visit(CommaTypeIdentifierRepeated*) = 0;
    virtual void Visit(ExpressionAtExpression*) = 0;
    virtual void Visit(ExpressionBang*) = 0;
    virtual void Visit(ExpressionBinaryOperatorExpression*) = 0;
    virtual void Visit(ExpressionCommaExpressionRepeated*) = 0;
    virtual void Visit(ExpressionCommaExpressionRepeatedOptional*) = 0;
    virtual void Visit(ExpressionFalse*) = 0;
    virtual void Visit(ExpressionIdentifierExpressionCommaExpressionRepeatedOptional*) = 0;
    virtual void Visit(ExpressionLength*) = 0;
    virtual void Visit(ExpressionNewExpression*) = 0;
    virtual void Visit(ExpressionNewIdentifier*) = 0;
    virtual void Visit(ExpressionNumber*) = 0;
    virtual void Visit(ExpressionParentheses*) = 0;
    virtual void Visit(ExpressionThis*) = 0;
    virtual void Visit(ExpressionTrue*) = 0;
    virtual void Visit(ExtendsIdentifierOptional*) = 0;
    virtual void Visit(Goal*) = 0;
    virtual void Visit(Identifier*) = 0;
    virtual void Visit(MainClass*) = 0;
    virtual void Visit(MethodDeclaration*) = 0;
    virtual void Visit(MethodDeclarationRepeated*) = 0;
    virtual void Visit(Number*) = 0;
    virtual void Visit(StatementAssignmentArray*) = 0;
    virtual void Visit(StatementAssignment*) = 0;
    virtual void Visit(Statement*) = 0;
    virtual void Visit(StatementIfElse*) = 0;
    virtual void Visit(StatementPrint*) = 0;
    virtual void Visit(StatementRepeated*) = 0;
    virtual void Visit(StatementWhile*) = 0;
    virtual void Visit(TypeBoolean*) = 0;
    virtual void Visit(TypeIdentifierCommaTypeIdentifierRepeated*) = 0;
    virtual void Visit(TypeIdentifierCommaTypeIdentifierRepeatedOptional*) = 0;
    virtual void Visit(TypeIdentifier*) = 0;
    virtual void Visit(TypeIntArray*) = 0;
    virtual void Visit(TypeInt*) = 0;
    virtual void Visit(VarDeclaration*) = 0;
    virtual void Visit(VarDeclarationRepeated*) = 0;
};
